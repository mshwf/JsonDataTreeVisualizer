@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!-- #region old 1 -->
@*@{
        if (Model.HeadNode != null)
        {
            using (Html.BeginForm())
            {
                await DrawNode(Model.HeadNode);

                async Task DrawNode(TreeNode node)
                {
                    var margin = (node.Level * 20).ToString() + "px";
                    if (!node.IsFinal)
                    {
                        <h4 style="margin-left:@margin">@node.Key</h4>
                        foreach (var subnode in node.SubNodes)
                        {
                            await DrawNode(subnode);
                        }
                    }
                    else
                    {
                        int i = 0;
                        var id = node.Key + "_" + node.Level;
                        <div>
                            <label for="@id" style="margin-left: @margin">@node.Key</label>
                            @switch (node.ValueKind)
                            {
                                case System.Text.Json.JsonValueKind.Undefined:
                                    break;
                                case System.Text.Json.JsonValueKind.Object:
                                    break;
                                case System.Text.Json.JsonValueKind.Array:
                                    break;
                                case System.Text.Json.JsonValueKind.String:

                                    @Html.EditorFor(x => x.HeadNodeValues.StringValue)

                                    <input type="text" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />
                                    break;
                                case System.Text.Json.JsonValueKind.Number:
                                    <input type="number" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />

                                    break;
                                case System.Text.Json.JsonValueKind.True:
                                case System.Text.Json.JsonValueKind.False:
                                    <input type="checkbox" name="FlattenedNodes[@i].StringValue"
                                           checked="@(node.StringValue.ToString() == "True")"
                                           value="True" id="@id" />
                                    <input name="FlattenedNodes[@i].StringValue" type="hidden" value="False">
                                    break;
                                case System.Text.Json.JsonValueKind.Null:
                                    <input type="text" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />
                                    break;
                                default:
                                    break;
                            }
                        </div>
                    }

                }

                <button type="submit">Save</button>
            }
        }
    }*@
<!-- #endregion -->
<!-- #region old 2 -->
@*@{
        using (Html.BeginForm())
        {
            int i = 0;
            foreach (var node in Model.FlattenedNodes)
            {
                var id = node.Key + "_" + node.Level;
                var margin = (node.Level * 20).ToString() + "px";
                <div>
                    <label for="@id" style="margin-left: @margin">@node.Key</label>

                    <input type="hidden" name="FlattenedNodes[@i].Key" value="@node.Key" />
                    <input type="hidden" name="FlattenedNodes[@i].Level" value="@node.Level" />
                    <input type="hidden" name="FlattenedNodes[@i].ValueTypeCode" value="@node.ValueTypeCode" />

                    @switch (node.ValueTypeCode)
                    {
                        case TypeCode.Boolean:

                            <input type="checkbox" name="FlattenedNodes[@i].StringValue"
                                   checked="@(node.StringValue == "True")"
                                   value="True" />
                            <input name="FlattenedNodes[@i].StringValue" type="hidden" value="False">

                            break;

                        case TypeCode.String:
                            <input type="text" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" />
                            break;

                        case TypeCode.Double:
                            <input type="number" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" />
                            break;
                        default:
                            break;
                    }

                </div>
                i++;
            }
            <button type="submit">Save</button>

        }

    }*@
<!-- #endregion -->
@{
    using (Html.BeginForm())
    {
        int i = 0;
        foreach (var node in Model.FlattenedNodes)
        {
            var marginVal = (node.Level * 20);
            var margin = marginVal.ToString() + "px";


            var id = node.Key + "_" + i;

            <div>

                @{if (node.ValueKind == System.Text.Json.JsonValueKind.Object)
                    {
                        <h5 style="margin-left: @margin">@node.Key</h5>
                    }
                    else
                    {
                        <label for="@id" style="margin-left: @margin">@node.Key</label>
                    }
                }

                <input type="hidden" name="FlattenedNodes[@i].Key" value="@node.Key" />
                <input type="hidden" name="FlattenedNodes[@i].ValueKind" value="@node.ValueKind" />
                <input type="hidden" name="FlattenedNodes[@i].Level" value="@node.Level" />
                <input type="hidden" name="FlattenedNodes[@i].Key" value="@node.Key" />
                <input type="hidden" name="FlattenedNodes[@i].ID" value="@node.ID" />
                <input type="hidden" name="FlattenedNodes[@i].ParentId" value="@node.ParentID" />

                @switch (node.ValueKind)
                {
                    case System.Text.Json.JsonValueKind.Undefined:
                        break;
                    case System.Text.Json.JsonValueKind.Object:
                        break;
                    case System.Text.Json.JsonValueKind.Array:
                        break;
                    case System.Text.Json.JsonValueKind.String:
                        <input type="text" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />
                        break;
                    case System.Text.Json.JsonValueKind.Number:
                        <input type="number" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />

                        break;
                    case System.Text.Json.JsonValueKind.True:
                    case System.Text.Json.JsonValueKind.False:
                        <input type="checkbox" name="FlattenedNodes[@i].StringValue"
                               checked="@(node.StringValue.ToString() == "True")"
                               value="True" id="@id" />
                        <input name="FlattenedNodes[@i].StringValue" type="hidden" value="False">
                        break;
                    case System.Text.Json.JsonValueKind.Null:
                        <input type="text" name="FlattenedNodes[@i].StringValue" value="@node.StringValue" id="@id" />
                        break;
                    default:
                        break;
                }

            </div>
            i++;
        }
        <button type="submit">Save</button>
    }
}